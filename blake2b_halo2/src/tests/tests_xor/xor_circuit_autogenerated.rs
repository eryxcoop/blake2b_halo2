use super::*;
use crate::base_operations::decompose_8::Decompose8Config;
use halo2_proofs::circuit::SimpleFloorPlanner;
use halo2_proofs::plonk::{Circuit, Fixed};
use std::array;
use std::marker::PhantomData;
use crate::base_operations::xor::Xor;

cfg_if::cfg_if! {
    if #[cfg(any(feature = "opt_4_limbs", feature = "opt_recycle"))] {
        use crate::base_operations::xor_table::XorTableConfig;
        type XorConfig<F> = XorTableConfig<F>;
    } else {
        use crate::base_operations::xor_spread::XorSpreadConfig;
        type XorConfig<F> = XorSpreadConfig<F>;
    }
}

#[derive(Clone)]
pub struct XorCircuitConfig<F: PrimeField> {
    _ph: PhantomData<F>,
    xor_config: XorConfig<F>,
    decompose_8_config: Decompose8Config<F>,
}

pub struct XorCircuitAutogenerated<F: Field> {
    _ph: PhantomData<F>,
    value_a: Value<F>,
    value_b: Value<F>,
    expected_result: Value<F>,
}

#[derive(Clone)]
pub struct XorConfigWithResultValidation<F: PrimeField> {
    _ph: PhantomData<F>,
    xor_config: XorCircuitConfig<F>,
    fixed: Column<Fixed>,
}

impl<F: Field> XorCircuitAutogenerated<F> {
    pub fn new_for(value_a: Value<F>, value_b: Value<F>, expected_result: Value<F>) -> Self {
        Self {
            _ph: PhantomData,
            value_a,
            value_b,
            expected_result,
        }
    }
}

impl<F: PrimeField> Circuit<F> for XorCircuitAutogenerated<F> {
    type Config = XorConfigWithResultValidation<F>;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self {
            _ph: PhantomData,
            value_a: Value::unknown(),
            value_b: Value::unknown(),
            expected_result: Value::unknown(),
        }
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        let full_number_u64 = meta.advice_column();
        let limbs_8_bits: [Column<Advice>; 8] = array::from_fn(|_| meta.advice_column());

        let decompose_8_config = Decompose8Config::configure(meta, full_number_u64, limbs_8_bits);

        cfg_if::cfg_if! {
            if #[cfg(any(feature = "opt_4_limbs", feature = "opt_recycle"))] {
                let xor_config = XorConfig::configure(meta, limbs_8_bits);
            } else {
                let extra = meta.advice_column();
                let xor_config = XorConfig::configure(meta, limbs_8_bits, full_number_u64, extra);
            }
        }

        let fixed = meta.fixed_column();
        meta.enable_equality(full_number_u64);
        meta.enable_equality(fixed);

        Self::Config {
            _ph: PhantomData,
            xor_config: XorCircuitConfig {
                _ph: PhantomData,
                decompose_8_config,
                xor_config,
            },
            fixed,
        }
    }

    #[allow(unused_variables)]
    fn synthesize(
        &self,
        mut config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        config.xor_config.decompose_8_config.populate_lookup_table(&mut layouter)?;
        config.xor_config.xor_config.populate_xor_lookup_table(&mut layouter)?;
        layouter.assign_region(
            || "xor",
            |mut region| {
                let mut offset = 0;
                let a_cell = config.xor_config.decompose_8_config.generate_row_from_value(
                    &mut region,
                    self.value_a,
                    offset,
                )?;
                offset += 1;
                let b_cell = config.xor_config.decompose_8_config.generate_row_from_value(
                    &mut region,
                    self.value_b,
                    offset,
                )?;
                offset += 1;

                let result = config.xor_config.xor_config.generate_xor_rows_from_cells_optimized(
                    &mut region,
                    &mut offset,
                    &a_cell,
                    &b_cell,
                    &mut config.xor_config.decompose_8_config,
                    false,
                )?[0]
                    .clone();

                let fixed_cell = region.assign_fixed(
                    || "assign fixed",
                    config.fixed,
                    0,
                    || self.expected_result,
                )?;
                region.constrain_equal(result.cell(), fixed_cell.cell())?;

                Ok(())
            },
        )?;

        Ok(())
    }
}
