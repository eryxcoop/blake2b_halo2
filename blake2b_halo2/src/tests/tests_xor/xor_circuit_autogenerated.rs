use super::*;
use crate::base_operations::decompose_8::Decompose8Config;
use halo2_proofs::circuit::SimpleFloorPlanner;
use halo2_proofs::plonk::{Circuit, Fixed};
use std::array;
use std::marker::PhantomData;
use crate::types::blake2b_word::Blake2bWord;

use crate::base_operations::xor::XorConfig;

#[derive(Clone)]
pub(crate) struct XorCircuitConfig<F: PrimeField> {
    _ph: PhantomData<F>,
    xor_config: XorConfig,
    decompose_8_config: Decompose8Config,
}

pub(crate) struct XorCircuitAutogenerated<F: PrimeField> {
    _ph: PhantomData<F>,
    value_a: Value<Blake2bWord>,
    value_b: Value<Blake2bWord>,
    expected_result: Value<Blake2bWord>,
}

#[derive(Clone)]
pub(crate) struct XorConfigWithResultValidation<F: PrimeField> {
    _ph: PhantomData<F>,
    xor_config: XorCircuitConfig<F>,
    fixed: Column<Fixed>,
}

impl<F: PrimeField> XorCircuitAutogenerated<F> {
    pub(crate) fn new_for(
        value_a: Value<Blake2bWord>,
        value_b: Value<Blake2bWord>,
        expected_result: Value<Blake2bWord>,
    ) -> Self {
        Self {
            _ph: PhantomData,
            value_a,
            value_b,
            expected_result,
        }
    }
}

impl<F: PrimeField> Circuit<F> for XorCircuitAutogenerated<F> {
    type Config = XorConfigWithResultValidation<F>;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self {
            _ph: PhantomData,
            value_a: Value::unknown(),
            value_b: Value::unknown(),
            expected_result: Value::unknown(),
        }
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        let full_number_u64 = meta.advice_column();
        let limbs_8_bits: [Column<Advice>; 8] = array::from_fn(|_| meta.advice_column());

        let decompose_8_config = Decompose8Config::configure(meta, full_number_u64, limbs_8_bits);

        let xor_config = XorConfig::configure(meta, limbs_8_bits, decompose_8_config.clone());

        let fixed = meta.fixed_column();
        meta.enable_equality(full_number_u64);
        meta.enable_equality(fixed);

        Self::Config {
            _ph: PhantomData,
            xor_config: XorCircuitConfig {
                _ph: PhantomData,
                decompose_8_config,
                xor_config,
            },
            fixed,
        }
    }

    #[allow(unused_variables)]
    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        config.xor_config.decompose_8_config.populate_lookup_table(&mut layouter)?;
        config.xor_config.xor_config.populate_xor_lookup_table(&mut layouter)?;
        layouter.assign_region(
            || "xor",
            |mut region| {
                let mut offset = 0;
                let a_cell = config.xor_config.decompose_8_config.generate_row_from_word_value(
                    &mut region,
                    self.value_a,
                    offset,
                )?.full_number;
                offset += 1;
                let b_cell = config.xor_config.decompose_8_config.generate_row_from_word_value(
                    &mut region,
                    self.value_b,
                    offset,
                )?.full_number;
                offset += 1;

                let result = config
                    .xor_config
                    .xor_config
                    .generate_xor_rows_from_cells(
                        &mut region,
                        &mut offset,
                        &a_cell,
                        &b_cell,
                    )?
                    .full_number
                    .clone();

                let fixed_cell = region.assign_fixed(
                    || "assign fixed",
                    config.fixed,
                    0,
                    || self.expected_result,
                )?;
                region.constrain_equal(result.cell(), fixed_cell.cell())?;

                Ok(())
            },
        )?;

        Ok(())
    }
}
