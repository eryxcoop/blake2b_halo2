use super::*;
use crate::chips::decompose_8_chip::Decompose8Chip;
use halo2_proofs::circuit::SimpleFloorPlanner;
use halo2_proofs::plonk::{Circuit, Fixed};
use std::array;
use std::marker::PhantomData;

pub struct XorCircuitAutogenerated<F: Field> {
    _ph: PhantomData<F>,
    value_a: Value<F>,
    value_b: Value<F>,
    expected_result: Value<F>,
}

#[derive(Clone)]
pub struct XorConfigWithResultValidation<F: PrimeField> {
    _ph: PhantomData<F>,
    xor_config: XorConfig<F>,
    fixed: Column<Fixed>,
}

impl<F: Field> XorCircuitAutogenerated<F> {
    pub fn new_for(value_a: Value<F>, value_b: Value<F>, expected_result: Value<F>) -> Self {
        Self {
            _ph: PhantomData,
            value_a,
            value_b,
            expected_result,
        }
    }
}

impl<F: PrimeField> Circuit<F> for XorCircuitAutogenerated<F> {
    type Config = XorConfigWithResultValidation<F>;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self {
            _ph: PhantomData,
            value_a: Value::unknown(),
            value_b: Value::unknown(),
            expected_result: Value::unknown(),
        }
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        let full_number_u64 = meta.advice_column();
        let limbs_8_bits: [Column<Advice>; 8] = array::from_fn(|_| meta.advice_column());

        let decompose_8_chip = Decompose8Chip::configure(meta, full_number_u64, limbs_8_bits);
        let xor_chip = XorChip::configure(meta, limbs_8_bits);

        let fixed = meta.fixed_column();
        meta.enable_equality(full_number_u64);
        meta.enable_equality(fixed);

        Self::Config {
            _ph: PhantomData,
            xor_config: XorConfig {
                _ph: PhantomData,
                decompose_8_chip,
                xor_chip,
            },
            fixed,
        }
    }

    #[allow(unused_variables)]
    fn synthesize(
        &self,
        mut config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        config.xor_config.decompose_8_chip.populate_lookup_table(&mut layouter)?;
        config.xor_config.xor_chip.populate_xor_lookup_table(&mut layouter)?;
        let result = config.xor_config.xor_chip.generate_xor_rows(
            &mut layouter,
            self.value_a,
            self.value_b,
            &mut config.xor_config.decompose_8_chip,
        )?;

        layouter.assign_region(
            || "fixed",
            |mut region| {
                // add the value to the fixed column
                // if the same constant is used multiple times,
                // we could optimize this by caching the cell
                let fixed_cell = region.assign_fixed(
                    || "assign fixed",
                    config.fixed,
                    0,
                    || self.expected_result,
                )?;
                region.constrain_equal(result.cell(), fixed_cell.cell())?;
                Ok(())
            },
        )?;

        Ok(())
    }
}
