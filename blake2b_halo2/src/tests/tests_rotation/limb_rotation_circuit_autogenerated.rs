use super::*;
use crate::base_operations::decompose_8::Decompose8Config;
use crate::base_operations::generic_limb_rotation::LimbRotation;
use ff::PrimeField;
use halo2_proofs::circuit::SimpleFloorPlanner;
use halo2_proofs::plonk::{Circuit, Fixed};
use std::array;

#[derive(Clone)]
pub struct LimbRotationConfigAutogenerated<F: PrimeField> {
    limb_rotation_config: LimbRotationCircuitConfig<F>,
    fixed: Column<Fixed>,
}

#[derive(Clone)]
pub struct LimbRotationCircuitAutogenerated<F: PrimeField, const T: usize> {
    _ph: PhantomData<F>,
    input: Value<F>,
    result: Value<F>,
}

impl<F: PrimeField, const T: usize> LimbRotationCircuitAutogenerated<F, T> {
    pub fn new_for(input: Value<F>, expected_output: Value<F>) -> Self {
        Self {
            _ph: PhantomData,
            input,
            result: expected_output,
        }
    }
}

impl<F: PrimeField, const T: usize> Circuit<F> for LimbRotationCircuitAutogenerated<F, T> {
    type Config = LimbRotationConfigAutogenerated<F>;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self {
            _ph: PhantomData,
            input: Value::unknown(),
            result: Value::unknown(),
        }
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        let full_number_u64 = meta.advice_column();
        let limbs: [Column<Advice>; 8] = array::from_fn(|_| {
            let column = meta.advice_column();
            meta.enable_equality(column);
            column
        });
        let fixed = meta.fixed_column();
        meta.enable_equality(fixed);
        meta.enable_equality(full_number_u64);

        let decompose_8_config = Decompose8Config::configure(meta, full_number_u64, limbs);

        Self::Config {
            limb_rotation_config: LimbRotationCircuitConfig {
                _ph: PhantomData,
                decompose_8_config,
                limb_rotation_config: LimbRotation,
            },
            fixed,
        }
    }

    fn synthesize(
        &self,
        mut config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        let limbs_to_rotate_to_the_right = match T {
            32 => 4,
            24 => 3,
            16 => 2,
            _ => panic!("Unexpected Rotation"),
        };

        config.limb_rotation_config.decompose_8_config.populate_lookup_table(&mut layouter)?;
        layouter.assign_region(
            || format!("Rotate {} limbs", limbs_to_rotate_to_the_right),
            |mut region| {
                let mut offset = 0;
                let input_row = config
                    .limb_rotation_config
                    .decompose_8_config
                    .generate_row_from_value_and_keep_row(&mut region, self.input, offset)?;
                offset += 1;

                let self1 = &config.limb_rotation_config.limb_rotation_config;
                let decompose_config = &mut config.limb_rotation_config.decompose_8_config;
                let result = self1.generate_rotation_rows_from_input_row(
                    &mut region,
                    &mut offset,
                    decompose_config,
                    input_row.try_into().unwrap(),
                    limbs_to_rotate_to_the_right,
                )?;

                // Check that the calculation was performed correctly by the limb rotation config
                let fixed_cell = region.assign_fixed(
                    || "assign expected result",
                    config.fixed,
                    0,
                    || self.result,
                )?;
                region.constrain_equal(result.cell(), fixed_cell.cell())?;
                Ok(())
            },
        )?;

        Ok(())
    }
}
