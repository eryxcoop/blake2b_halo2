use super::*;
use crate::base_operations::decompose_8::Decompose8Config;
use crate::base_operations::generic_limb_rotation::LimbRotation;
use crate::base_operations::rotate_63::Rotate63Config;

// -------- Rotation 63 with 8 bit limbs ------------
mod rotation_63_circuit_8bit_limbs;
#[cfg(test)]
mod test_rotation_63_8_bit_limbs;

mod rotation_63_cirtuit_8bit_limbs_autogenerated;
#[cfg(test)]
mod test_rotation_63_8_bit_limbs_autogenerated;

#[derive(Clone)]
pub(crate) struct Rotation63Config8bitLimbs<F: PrimeField> {
    _ph: PhantomData<F>,
    rotation_63_config: Rotate63Config,
    decompose_8_config: Decompose8Config,
}

// --------------------------------------------------

#[cfg(test)]
mod limb_rotation_circuit;
mod test_limb_rotation_16_24_32;

mod limb_rotation_circuit_autogenerated;
#[cfg(test)]
mod test_limb_rotation_16_24_32_autogenerated;

#[derive(Clone)]
pub(crate) struct LimbRotationCircuitConfig<F: PrimeField> {
    _ph: PhantomData<F>,
    decompose_8_config: Decompose8Config,
    limb_rotation_config: LimbRotation,
}

impl Rotate63Config {
    /// Receives a trace and populates the rows for the rotation of 63 bits to the right
    fn populate_rotation_rows<F: PrimeField>(
        &self,
        layouter: &mut impl Layouter<F>,
        decompose_config: &mut Decompose8Config,
        trace: [[Value<F>; 9]; 2],
    ) -> Result<(), Error> {
        layouter.assign_region(
            || "rotate 63",
            |mut region| {
                let first_row = trace[0].to_vec();
                let second_row = trace[1].to_vec();
                decompose_config.populate_row_from_values(&mut region, &first_row, 0, true)?;
                decompose_config.populate_row_from_values(&mut region, &second_row, 1, true)?;
                self.q_rot63.enable(&mut region, 1)
            },
        )?;
        Ok(())
    }
}
