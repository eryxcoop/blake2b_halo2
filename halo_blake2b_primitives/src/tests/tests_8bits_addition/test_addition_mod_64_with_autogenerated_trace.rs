use halo2_proofs::dev::MockProver;
use halo2_proofs::halo2curves::bn256::Fr;
use crate::auxiliar_functions::{value_for};
use crate::tests::tests_8bits_addition::addition_mod_64_circuit_8bits_autogenerated::AdditionMod64Circuit8BitsAutogenerated;

#[test]
fn test_positive_addition() {
    let a = 150u128;
    let b = 50u128;
    let expected_result = 200u128;
    let expected_carry = 0u128;
    test_addition(a, b, expected_result, expected_carry);
}

#[test]
fn test_positive_addition_with_0() {
    let a = 150u128;
    let b = 0u128;
    let expected_result = 150u128;
    let expected_carry = 0u128;
    test_addition(a, b, expected_result, expected_carry);
}

#[test]
fn test_positive_addition_with_carry() {
    let a = (1u128 << 64) - 1;
    let b = 1;
    let expected_result = 0u128;
    let expected_carry = 1u128;
    test_addition(a, b, expected_result, expected_carry);
}

fn test_addition(a: u128, b: u128, expected_result: u128, expected_carry: u128) {
    let circuit = AdditionMod64Circuit8BitsAutogenerated::<Fr>::new_for(
        value_for(a),
        value_for(b),
        value_for(expected_result),
        value_for(expected_carry),
    );
    let prover = MockProver::run(17, &circuit, vec![]).unwrap();
    prover.verify().unwrap();
}
