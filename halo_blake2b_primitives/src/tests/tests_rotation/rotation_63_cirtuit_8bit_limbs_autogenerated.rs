use super::*;
use crate::chips::decompose_8_chip::Decompose8Chip;
use crate::chips::rotate_63_chip::Rotate63Chip;
use halo2_proofs::plonk::Fixed;
use std::array;
use std::marker::PhantomData;

#[derive(Clone)]
pub struct Rotation63Config8bitWithResultValidation<F: PrimeField> {
    _ph: PhantomData<F>,
    rotation_63_config: Rotation63Config8bitLimbs<F>,
    fixed: Column<Fixed>,
}

pub struct Rotation63Circuit8bitLimbsAutogenerated<F: PrimeField> {
    _ph: PhantomData<F>,
    input: Value<F>,
    result: Value<F>,
}

impl<F: PrimeField> Rotation63Circuit8bitLimbsAutogenerated<F> {
    pub fn new_for(input: Value<F>, result: Value<F>) -> Self {
        Self {
            _ph: PhantomData,
            input,
            result,
        }
    }
}

impl<F: PrimeField> Circuit<F> for Rotation63Circuit8bitLimbsAutogenerated<F> {
    type Config = Rotation63Config8bitWithResultValidation<F>;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self {
            _ph: PhantomData,
            input: Value::unknown(),
            result: Value::unknown(),
        }
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        let full_number_u64 = meta.advice_column();
        let fixed = meta.fixed_column();
        meta.enable_equality(full_number_u64);
        meta.enable_equality(fixed);

        let limbs_8_bits: [Column<Advice>; 8] = array::from_fn(|_| meta.advice_column());

        let decompose_8_chip = Decompose8Chip::configure(meta, full_number_u64, limbs_8_bits);

        let rotation_63_chip = Rotate63Chip::configure(meta, full_number_u64);

        Self::Config {
            _ph: PhantomData,
            rotation_63_config: Rotation63Config8bitLimbs {
                _ph: PhantomData,
                decompose_8_chip,
                rotation_63_chip,
            },
            fixed,
        }
    }

    #[allow(unused_variables)]
    fn synthesize(
        &self,
        mut config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        config
            .rotation_63_config
            .decompose_8_chip
            .populate_lookup_table(&mut layouter)?;
        let result = config
            .rotation_63_config
            .rotation_63_chip
            .generate_rotation_rows(
                &mut layouter,
                self.input,
                &mut config.rotation_63_config.decompose_8_chip.clone(),
            )?;

        // Check that the calculation was performed correctly by the Rotate63 chip
        layouter.assign_region(
            || "fixed",
            |mut region| {
                let fixed_cell = region.assign_fixed(
                    || "assign expected result",
                    config.fixed,
                    0,
                    || self.result,
                )?;
                // Constrain expected result
                region.constrain_equal(result.cell(), fixed_cell.cell())?;
                Ok(())
            },
        )?;

        Ok(())
    }
}
