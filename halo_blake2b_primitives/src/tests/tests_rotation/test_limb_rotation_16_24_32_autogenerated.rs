use halo2_proofs::dev::MockProver;
use super::*;
use crate::tests::tests_rotation::limb_rotation_circuit_autogenerated::LimbRotationCircuitAutogenerated;

#[test]
fn test_limb_rotation_chip_should_generate_32_bit_rotation_trace_correctly() {
    let input_number = 1u128;
    let expected_result_number = input_number << 32;

    _test_limb_rotation_autogenerated::<32>(input_number, expected_result_number);
}

#[test]
#[should_panic]
fn test_limb_rotation_chip_for_32_bits_should_panic_over_a_wrong_result() {
    let input_number = 1u128;
    let wrong_expected_result_number = (input_number << 32) + 1;

    _test_limb_rotation_autogenerated::<32>(input_number, wrong_expected_result_number);
}

#[test]
fn test_limb_rotation_chip_should_generate_24_bit_rotation_trace_correctly() {
    let expected_result_number = 1u128;
    let input_number = expected_result_number << 24;

    _test_limb_rotation_autogenerated::<24>(input_number, expected_result_number);
}

#[test]
#[should_panic]
fn test_limb_rotation_chip_for_24_bits_should_panic_over_a_wrong_result() {
    let input_number = 1u128;
    let wrong_expected_result_number = (input_number << 24) + 1;

    _test_limb_rotation_autogenerated::<24>(input_number, wrong_expected_result_number);
}

#[test]
fn test_limb_rotation_chip_should_generate_16_bit_rotation_trace_correctly() {
    let input_number = 1u128 << 16;
    let expected_result_number = 1u128;

    _test_limb_rotation_autogenerated::<16>(input_number, expected_result_number);
}

#[test]
#[should_panic]
fn test_limb_rotation_chip_for_16_bits_should_panic_over_a_wrong_result() {
    let input_number = 1u128;
    let wrong_expected_result_number = (input_number << 16) + 1;

    _test_limb_rotation_autogenerated::<16>(input_number, wrong_expected_result_number);
}

fn _test_limb_rotation_autogenerated<const N: usize>(
    input_number: u128,
    expected_result_number: u128,
) {
    let circuit = LimbRotationCircuitAutogenerated::<Fr, N>::new_for(
        value_for(input_number),
        value_for(expected_result_number),
    );
    let prover = MockProver::run(17, &circuit, vec![]).unwrap();
    prover.verify().unwrap();
}
